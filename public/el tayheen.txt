index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>El-Tayheen</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div id="app">
        <!-- Loading Overlay -->
        <div id="loading-overlay" class="loading-overlay" style="display: none;">
            <div class="loading-spinner"></div>
            <div id="loading-text">Loading...</div>
        </div>

        <!-- Main Menu / Splash Screen -->
        <div class="splash-screen">
            <img src="logo.png" alt="El-Tayheen Logo" class="centered-logo">
            <div style="display: flex; gap: 10px;">
                <button id="leader-button">Owner</button>
                <button id="join-button">Player</button>
            </div>
        </div>

        <!-- Owner Interface -->
        <div id="owner-interface">
            <!-- Owner First Page -->
            <div id="first-page" class="page">
                <img src="logo.png" alt="El-Tayheen Logo" class="centered-logo">
                <h2>Create a New Game</h2>
                <form id="create-game-form">
                    <input type="text" id="game-name" placeholder="Game Name" required>
                    <input type="password" id="password" placeholder="Password" required>
                    <button type="submit">Create Game</button>
                </form>

                <h2>Existing Games</h2>
                <ul id="game-list"></ul>
                <div id="password-prompt" style="display: none;">
                    <h3>Enter Password for <span id="selected-game-name"></span></h3>
                    <input type="password" id="game-password" placeholder="Password" required>
                    <button id="verify-password-btn">Verify</button>
                </div>
                <button class="back-button" onclick="goBack()">Back</button>
            </div>

            <!-- Dashboard Page -->
            <div id="dashboard-page" class="page">
                <div id="top-bar">
                    <h1 id="game-name-display" class="graffiti-font">El Tayheen</h1>
                    <button id="back-to-first-page-btn" class="back-button">Back</button>
                </div>

                <div id="active-game-section">
                    <h2>Active Tasks</h2>
                    <ul id="active-tasks"></ul>
                </div>

                <button id="new-task-btn">Create New Task</button>
                <button id="winners-btn">Winners</button>
                <button id="delete-game-btn" class="delete-button">Delete Game</button>

                <!-- Task Creation UI -->
                <div id="troop-selection" style="display: none;">
                    <h2>Select Troop</h2>
                    <button id="troop-1-btn">Troop 1</button>
                    <button id="troop-2-btn">Troop 2</button>
                    <button id="back-to-dashboard-btn" class="back-button">Back</button>
                </div>

                <div id="task-creation" style="display: none;">
                    <h2>Create Task for <span id="selected-troop"></span></h2>
                    <form id="create-task-form">
                        <input type="text" id="task-description" placeholder="Task Description" required>
                        <textarea id="submission-details" placeholder="Submission Details"></textarea>
                        <input type="text" id="reward" placeholder="Reward" required>
                        <div class="coordinate-inputs">
                            <input type="text" id="latitude" placeholder="Latitude" required>
                            <input type="text" id="longitude" placeholder="Longitude" required>
                        </div>
                        <input type="number" id="timer" placeholder="Timer (minutes)" required>
                        <label>
                            <input type="checkbox" id="requires-picture"> Requires Picture
                        </label>
                        <div class="button-group">
                            <button type="button" id="get-coordinates-btn">Get Coordinates</button>
                            <button type="button" id="next-btn">Next</button>
                        </div>
                    </form>
                </div>

                <div id="send-task-section" style="display: none;">
                    <button id="send-task-btn" disabled>Send Task</button>
                    <button id="back-to-task-creation-btn" class="back-button">Back</button>
                </div>

                <!-- Task Review Section -->
                <div id="task-review" class="task-review" style="display: none;">
                    <h2>Task Submissions</h2>
                    <div class="submissions-container">
                        <div class="team-submissions" id="team1-submissions">
                            <h3 class="team-name">Team 1</h3>
                            <div class="submission-content"></div>
                            <button class="winner-button" data-team="troop1">Select as Winner</button>
                        </div>
                        <div class="team-submissions" id="team2-submissions">
                            <h3 class="team-name">Team 2</h3>
                            <div class="submission-content"></div>
                            <button class="winner-button" data-team="troop2">Select as Winner</button>
                        </div>
                    </div>
                    <button class="back-button" onclick="closeTaskReview()">Back</button>
                </div>
            </div>

            <!-- Winners Page -->
            <div id="winners-page" class="page">
                <h2>Winners History</h2>
                <ul id="winners-list"></ul>
                <button id="back-to-dashboard-from-winners-btn" class="back-button">Back</button>
            </div>
        </div>

        <!-- Player Interface -->
        <div id="player-interface">
            <!-- Troop Selection -->
            <div id="troop-selection-page" class="page">
                <h2>Select Your Troop</h2>
                <button id="troop1-button">Troop 1</button>
                <button id="troop2-button">Troop 2</button>
                <button class="back-button" onclick="goBack()">Back</button>
            </div>

            <!-- Troop Setup Pages -->
            <div id="troop1-setup-page" class="page">
                <h2>Troop 1 Setup</h2>
                <input type="text" id="troop1-name" placeholder="Enter Troop Name">
                <input type="password" id="troop1-password" placeholder="Set Password (min 4 chars)">
                <div id="troop1-error" class="error-message"></div>
                <button id="save-troop1">Save</button>
                <button class="back-button" onclick="goBack()">Back</button>
            </div>

            <div id="troop2-setup-page" class="page">
                <h2>Troop 2 Setup</h2>
                <input type="text" id="troop2-name" placeholder="Enter Troop Name">
                <input type="password" id="troop2-password" placeholder="Set Password (min 4 chars)">
                <div id="troop2-error" class="error-message"></div>
                <button id="save-troop2">Save</button>
                <button class="back-button" onclick="goBack()">Back</button>
            </div>

            <!-- Troop Login Pages -->
            <div id="troop1-login-page" class="page">
                <h2 id="troop1-login-title">Troop 1 Login</h2>
                <input type="password" id="troop1-login-password" placeholder="Enter Password">
                <div id="troop1-login-error" class="error-message"></div>
                <button id="login-troop1">Login</button>
                <button class="back-button" onclick="goBack()">Back</button>
            </div>

            <div id="troop2-login-page" class="page">
                <h2 id="troop2-login-title">Troop 2 Login</h2>
                <input type="password" id="troop2-login-password" placeholder="Enter Password">
                <div id="troop2-login-error" class="error-message"></div>
                <button id="login-troop2">Login</button>
                <button class="back-button" onclick="goBack()">Back</button>
            </div>

            <!-- Team Pages -->
            <div id="team1-page" class="page">
                <div class="top-circle">
                    <img src="logo.png" alt="App Logo" id="team1-camera-btn">
                </div>
                <div class="distance-indicator">Distance: <span id="distance-value1">--</span>m</div>
                <div class="timer">00:00</div>
                <div class="compass-module">
                    <div class="compass-base">
                        <div class="compass-markers">
                            <div class="north">N</div>
                            <div class="south">S</div>
                            <div class="east">E</div>
                            <div class="west">W</div>
                        </div>
                        <div class="compass-needle" id="compass-needle"></div>
                    </div>
                </div>
                <div id="task-info1" class="task-info" style="display: none;">
                    <h3>Task Details</h3>
                    <p id="task-description1"></p>
                    <p id="submission-details1"></p>
                    <button id="submit-task1" class="submit-button">Submit Task</button>
                </div>
                <button class="back-button" onclick="goBack()">Back</button>
            </div>

            <div id="team2-page" class="page">
                <div class="top-circle">
                    <img src="logo.png" alt="App Logo" id="team2-camera-btn">
                </div>
                <div class="distance-indicator">Distance: <span id="distance-value2">--</span>m</div>
                <div class="timer">00:00</div>
                <div class="compass-module">
                    <div class="compass-base">
                        <div class="compass-markers">
                            <div class="north">N</div>
                            <div class="south">S</div>
                            <div class="east">E</div>
                            <div class="west">W</div>
                        </div>
                        <div class="compass-needle" id="compass-needle"></div>
                    </div>
                </div>
                <div id="task-info2" class="task-info" style="display: none;">
                    <h3>Task Details</h3>
                    <p id="task-description2"></p>
                    <p id="submission-details2"></p>
                    <button id="submit-task2" class="submit-button">Submit Task</button>
                </div>
                <button class="back-button" onclick="goBack()">Back</button>
            </div>
        </div>

        <!-- Camera Interface -->
        <div id="camera-interface" class="camera-interface" style="display: none;">
            <video id="camera-feed" autoplay playsinline></video>
            <canvas id="photo-canvas" style="display: none;"></canvas>
            <div class="camera-controls">
                <button id="capture-photo" class="camera-button">Take Photo</button>
                <button id="accept-photo" class="camera-button" style="display: none;">✓</button>
                <button id="retake-photo" class="camera-button" style="display: none;">↺</button>
                <button id="close-camera" class="camera-button">✕</button>
            </div>
        </div>

        <!-- Modals -->
        <div id="confirmation-modal" class="modal" style="display: none;">
            <div class="modal-content">
                <h2>Confirm Delete</h2>
                <p>Are you sure you want to delete this game?</p>
                <input type="password" id="delete-password" placeholder="Enter Password">
                <div class="modal-buttons">
                    <button id="confirm-delete-btn">Delete</button>
                    <button id="cancel-delete-btn">Cancel</button>
                </div>
            </div>
        </div>

        <div id="task-submission-modal" class="modal" style="display: none;">
            <div class="modal-content">
                <h2>Submit Task Response</h2>
                <textarea id="response-text" placeholder="Enter your response"></textarea>
                <div id="photo-preview"></div>
                <div class="modal-buttons">
                    <button id="submit-response-btn">Submit</button>
                    <button id="cancel-response-btn">Cancel</button>
                </div>
            </div>
        </div>

        <div id="reward-modal" class="modal" style="display: none;">
            <div class="modal-content">
                <h2>Congratulations!</h2>
                <p>You won:</p>
                <p id="reward-details" class="reward-text"></p>
                <button id="close-reward-modal-btn">Close</button>
            </div>
        </div>
    </div>

    <script src="app.js"></script>
</body>
</html>

app.js

document.addEventListener('DOMContentLoaded', () => {
    // Global variables
    let currentRole = null;
    let selectedGameId = null;
    let troopTasks = { troop1: null, troop2: null };
    let troop1Name = '';
    let troop1Password = '';
    let troop2Name = '';
    let troop2Password = '';
    let currentTroopId = null;
    let watchId = null;
    let currentPosition = null;
    let locationCheckInterval = null;
    let compassUpdateInterval = null;
    let cameraStream = null;

    // Cache DOM Elements - Common
    const splashScreen = document.querySelector('.splash-screen');
    const leaderButton = document.getElementById('leader-button');
    const joinButton = document.getElementById('join-button');
    const loadingOverlay = document.getElementById('loading-overlay');

    // Cache DOM Elements - Player
    const troop1Button = document.getElementById('troop1-button');
    const troop2Button = document.getElementById('troop2-button');
    const team1Page = document.getElementById('team1-page');
    const team2Page = document.getElementById('team2-page');
    const cameraInterface = document.getElementById('camera-interface');
    const cameraFeed = document.getElementById('camera-feed');
    const photoCanvas = document.getElementById('photo-canvas');
    const capturePhotoBtn = document.getElementById('capture-photo');
    const acceptPhotoBtn = document.getElementById('accept-photo');
    const retakePhotoBtn = document.getElementById('retake-photo');
    const closeCameraBtn = document.getElementById('close-camera');

    // Cache DOM Elements - Owner
    const firstPage = document.getElementById('first-page');
    const dashboardPage = document.getElementById('dashboard-page');
    const gameList = document.getElementById('game-list');
    const passwordPrompt = document.getElementById('password-prompt');
    const selectedGameName = document.getElementById('selected-game-name');
    const verifyPasswordBtn = document.getElementById('verify-password-btn');
    const taskReviewSection = document.getElementById('task-review');

    // Loading Functions
    function showLoading(message = 'Loading...') {
        document.getElementById('loading-text').textContent = message;
        loadingOverlay.style.display = 'flex';
    }

    function hideLoading() {
        loadingOverlay.style.display = 'none';
    }

    // Page Management
    function showPage(pageId) {
        document.querySelectorAll('.page').forEach(p => {
            p.classList.remove('active');
            p.style.display = 'none';
        });
        splashScreen.style.display = 'none';
        const page = document.getElementById(pageId);
        if (page) {
            page.classList.add('active');
            page.style.display = 'block';
        }
    }

    // Location and Compass Functions
    async function startLocationTracking() {
        if (!navigator.geolocation) {
            alert('Geolocation is not supported by your browser');
            return;
        }

        try {
            const permission = await navigator.permissions.query({ name: 'geolocation' });
            if (permission.state === 'denied') {
                alert('Location permission is required for this app');
                return;
            }

            watchId = navigator.geolocation.watchPosition(
                handlePositionUpdate,
                handleLocationError,
                {
                    enableHighAccuracy: true,
                    maximumAge: 0,
                    timeout: 5000
                }
            );

            // Start location check interval
            locationCheckInterval = setInterval(checkLocationAndUpdateTask, 5000);
        } catch (error) {
            console.error('Error starting location tracking:', error);
            alert('Failed to start location tracking');
        }
    }

    async function handlePositionUpdate(position) {
        currentPosition = {
            latitude: position.coords.latitude,
            longitude: position.coords.longitude
        };

        // Update distance to target
        await checkLocationAndUpdateTask();
        // Update compass direction
        await updateCompassDirection();
    }

    function handleLocationError(error) {
        console.error('Location error:', error);
        alert(`Location error: ${error.message}`);
    }

    async function checkLocationAndUpdateTask() {
        if (!currentPosition || !selectedGameId || !currentTroopId) return;

        try {
            const response = await fetch('/check-location', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    gameId: selectedGameId,
                    troopId: currentTroopId,
                    latitude: currentPosition.latitude,
                    longitude: currentPosition.longitude
                })
            });

            if (!response.ok) throw await response.json();
            
            const data = await response.json();
            updateDistanceDisplay(data.distance);

            if (data.taskRevealed) {
                showTaskDetails(data.taskDetails);
            }
        } catch (error) {
            console.error('Error checking location:', error);
        }
    }

    function updateDistanceDisplay(distance) {
        const distanceElement = document.getElementById(`distance-value${currentTroopId === 'troop1' ? '1' : '2'}`);
        if (distanceElement) {
            distanceElement.textContent = distance || '--';
        }
    }

    async function updateCompassDirection() {
        if (!currentPosition || !selectedGameId || !currentTroopId) return;

        try {
            const response = await fetch(`/task-direction/${selectedGameId}/${currentTroopId}?latitude=${currentPosition.latitude}&longitude=${currentPosition.longitude}`);
            
            if (!response.ok) throw await response.json();
            
            const data = await response.json();
            if (data.bearing !== null) {
                updateCompassNeedle(data.bearing);
            }
        } catch (error) {
            console.error('Error updating compass direction:', error);
        }
    }

    function updateCompassNeedle(bearing) {
        const compassNeedle = document.querySelector('.compass-needle');
        if (compassNeedle) {
            compassNeedle.style.transform = `translate(-50%, -100%) rotate(${bearing}deg)`;
        }
    }

    // Camera Functions
    async function initializeCamera() {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({
                video: { facingMode: 'environment' },
                audio: false
            });
            
            cameraStream = stream;
            cameraFeed.srcObject = stream;
            cameraInterface.style.display = 'flex';
            capturePhotoBtn.style.display = 'block';
            acceptPhotoBtn.style.display = 'none';
            retakePhotoBtn.style.display = 'none';
        } catch (error) {
            console.error('Error accessing camera:', error);
            alert('Failed to access camera');
        }
    }

    function stopCamera() {
        if (cameraStream) {
            cameraStream.getTracks().forEach(track => track.stop());
            cameraStream = null;
        }
        cameraInterface.style.display = 'none';
    }

    capturePhotoBtn.addEventListener('click', () => {
        const context = photoCanvas.getContext('2d');
        photoCanvas.width = cameraFeed.videoWidth;
        photoCanvas.height = cameraFeed.videoHeight;
        context.drawImage(cameraFeed, 0, 0);
        
        cameraFeed.style.display = 'none';
        photoCanvas.style.display = 'block';
        capturePhotoBtn.style.display = 'none';
        acceptPhotoBtn.style.display = 'block';
        retakePhotoBtn.style.display = 'block';
    });

    retakePhotoBtn.addEventListener('click', () => {
        photoCanvas.style.display = 'none';
        cameraFeed.style.display = 'block';
        capturePhotoBtn.style.display = 'block';
        acceptPhotoBtn.style.display = 'none';
        retakePhotoBtn.style.display = 'none';
    });

    acceptPhotoBtn.addEventListener('click', () => {
        // Convert canvas to blob
        photoCanvas.toBlob(async (blob) => {
            await submitTaskWithPhoto(blob);
            stopCamera();
        }, 'image/jpeg');
    });

    closeCameraBtn.addEventListener('click', stopCamera);

    // Task Management Functions
    async function submitTaskWithPhoto(photoBlob) {
        const formData = new FormData();
        formData.append('gameId', selectedGameId);
        formData.append('troopId', currentTroopId);
        formData.append('photo', photoBlob, 'photo.jpg');
        formData.append('response', 'Photo submission');

        try {
            showLoading('Submitting task...');
            const response = await fetch('/submit-task', {
                method: 'POST',
                body: formData
            });

            if (!response.ok) throw await response.json();
            
            const data = await response.json();
            hideLoading();
            alert('Task submitted successfully!');
            hideTaskDetails();
        } catch (error) {
            hideLoading();
            console.error('Error submitting task:', error);
            alert('Failed to submit task');
        }
    }

    function showTaskDetails(taskDetails) {
        const taskInfo = document.getElementById(`task-info${currentTroopId === 'troop1' ? '1' : '2'}`);
        const taskDesc = document.getElementById(`task-description${currentTroopId === 'troop1' ? '1' : '2'}`);
        const submitDetails = document.getElementById(`submission-details${currentTroopId === 'troop1' ? '1' : '2'}`);
        
        if (taskInfo && taskDesc && submitDetails) {
            taskDesc.textContent = taskDetails.description;
            submitDetails.textContent = taskDetails.submissionDetails;
            taskInfo.style.display = 'block';

            // Show camera button if photo is required
            const cameraBtn = document.getElementById(`team${currentTroopId === 'troop1' ? '1' : '2'}-camera-btn`);
            if (cameraBtn) {
                cameraBtn.style.display = taskDetails.requiresPicture ? 'block' : 'none';
            }
        }
    }

    function hideTaskDetails() {
        const taskInfo = document.getElementById(`task-info${currentTroopId === 'troop1' ? '1' : '2'}`);
        if (taskInfo) {
            taskInfo.style.display = 'none';
        }
    }

    async function loadActiveTasks() {
        try {
            const response = await fetch(`/data/${selectedGameId}`);
            const gameData = await response.json();
            const activeTasksList = document.getElementById('active-tasks');
            activeTasksList.innerHTML = '';

            gameData.tasks.forEach(taskGroup => {
                if (taskGroup.status === 'ongoing') {
                    const li = document.createElement('li');
                    li.textContent = `${taskGroup.troop1Task.taskDescription} - Time Left: ${formatTimeLeft(taskGroup.troop1Task.timerEndsAt)}`;
                    li.addEventListener('click', () => showTaskSubmissions(taskGroup));
                    activeTasksList.appendChild(li);
                }
            });
        } catch (error) {
            console.error('Error loading tasks:', error);
            alert('Failed to load active tasks');
        }
    }

    function showTaskSubmissions(taskGroup) {
        taskReviewSection.style.display = 'block';
        
        // Display submissions for each team
        const team1Content = document.querySelector('#team1-submissions .submission-content');
        const team2Content = document.querySelector('#team2-submissions .submission-content');
        
        team1Content.innerHTML = formatSubmissions(taskGroup.troop1Task.submissions);
        team2Content.innerHTML = formatSubmissions(taskGroup.troop2Task.submissions);

        // Update team names
        document.querySelector('#team1-submissions .team-name').textContent = 
            troop1Name || 'Team 1';
        document.querySelector('#team2-submissions .team-name').textContent = 
            troop2Name || 'Team 2';

        // Add winner selection handlers
        document.querySelectorAll('.winner-button').forEach(button => {
            button.addEventListener('click', () => selectWinner(taskGroup.id, button.dataset.team));
        });
    }

    function formatSubmissions(submissions) {
        if (!submissions || submissions.length === 0) {
            return '<p>No submissions yet</p>';
        }

        return submissions.map(sub => `
            <div class="submission-item">
                ${sub.response}
                ${sub.photoPath ? `<img src="${sub.photoPath}" class="submission-photo" alt="Submission photo">` : ''}
                <div class="timestamp">Submitted: ${new Date(sub.submittedAt).toLocaleString()}</div>
            </div>
        `).join('');
    }

    async function selectWinner(taskId, winningTroopId) {
        try {
            showLoading('Selecting winner...');
            const response = await fetch('/set-winner', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    gameId: selectedGameId,
                    taskId,
                    winningTroopId
                })
            });

            if (!response.ok) throw await response.json();

            hideLoading();
            alert('Winner selected successfully!');
            taskReviewSection.style.display = 'none';
            loadActiveTasks();
        } catch (error) {
            hideLoading();
            console.error('Error selecting winner:', error);
            alert('Failed to select winner');
        }
    }

    // Event Listeners
    leaderButton.addEventListener('click', () => {
        currentRole = 'owner';
        showPage('first-page');
        loadGames();
    });

    joinButton.addEventListener('click', () => {
        currentRole = 'player';
        showPage('troop-selection-page');
        updateTroopButtonNames();
    });

    // Team Management Functions
    function updateTroopButtonNames() {
        if (troop1Name) {
            troop1Button.textContent = troop1Name;
        }
        if (troop2Name) {
            troop2Button.textContent = troop2Name;
        }
    }

    troop1Button.addEventListener('click', () => {
        currentTroopId = 'troop1';
        if (!troop1Name || !troop1Password) {
            showPage('troop1-setup-page');
        } else {
            document.getElementById('troop1-login-title').textContent = `${troop1Name} Login`;
            showPage('troop1-login-page');
        }
    });

    troop2Button.addEventListener('click', () => {
        currentTroopId = 'troop2';
        if (!troop2Name || !troop2Password) {
            showPage('troop2-setup-page');
        } else {
            document.getElementById('troop2-login-title').textContent = `${troop2Name} Login`;
            showPage('troop2-login-page');
        }
    });

    // Save Troop Handlers
    document.getElementById('save-troop1').addEventListener('click', async () => {
        const name = document.getElementById('troop1-name').value;
        const password = document.getElementById('troop1-password').value;
        const errorDiv = document.getElementById('troop1-error');
        errorDiv.textContent = '';

        if (name && password.length >= 4) {
            try {
                showLoading('Saving team setup...');
                const response = await fetch('/register-troop', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        gameId: selectedGameId,
                        troopId: 'troop1',
                        name,
                        password
                    })
                });

                if (!response.ok) throw await response.json();

                troop1Name = name;
                troop1Password = password;
                hideLoading();
                alert(`Team name: ${troop1Name} saved successfully.`);
                updateTroopButtonNames();
                showPage('team1-page');
                startLocationTracking();
            } catch (error) {
                hideLoading();
                errorDiv.textContent = error.error || 'Failed to save team details';
            }
        } else {
            errorDiv.textContent = 'Please enter a valid name and a password with at least 4 characters.';
        }
    });

    document.getElementById('save-troop2').addEventListener('click', async () => {
        const name = document.getElementById('troop2-name').value;
        const password = document.getElementById('troop2-password').value;
        const errorDiv = document.getElementById('troop2-error');
        errorDiv.textContent = '';

        if (name && password.length >= 4) {
            try {
                showLoading('Saving team setup...');
                const response = await fetch('/register-troop', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        gameId: selectedGameId,
                        troopId: 'troop2',
                        name,
                        password
                    })
                });

                if (!response.ok) throw await response.json();

                troop2Name = name;
                troop2Password = password;
                hideLoading();
                alert(`Team name: ${troop2Name} saved successfully.`);
                updateTroopButtonNames();
                showPage('team2-page');
                startLocationTracking();
            } catch (error) {
                hideLoading();
                errorDiv.textContent = error.error || 'Failed to save team details';
            }
        } else {
            errorDiv.textContent = 'Please enter a valid name and a password with at least 4 characters.';
        }
    });

    // Owner Game Management
    async function loadGames() {
        try {
            showLoading('Loading games...');
            const response = await fetch('/games');
            const games = await response.json();
            gameList.innerHTML = '';
            
            games.forEach(game => {
                const li = document.createElement('li');
                li.textContent = game.gameName;
                li.addEventListener('click', async () => {
                    selectedGameId = game.gameId;
                    selectedGameName.textContent = game.gameName;
                    troop1Name = game.troops.troop1;
                    troop2Name = game.troops.troop2;
                    updateTroopButtonNames();
                    
                    const verified = await verifyExistingPassword(game.gameId);
                    if (!verified) {
                        passwordPrompt.style.display = 'block';
                    }
                });
                gameList.appendChild(li);
            });
            hideLoading();
        } catch (error) {
            hideLoading();
            console.error('Error loading games:', error);
            alert('Failed to load games');
        }
    }

    document.getElementById('create-game-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        const gameName = document.getElementById('game-name').value;
        const password = document.getElementById('password').value;

        try {
            showLoading('Creating game...');
            const response = await fetch('/create-game', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ gameName, password }),
            });

            if (!response.ok) throw await response.json();

            const result = await response.json();
            selectedGameId = result.gameId;
            sessionStorage.setItem(`game_${result.gameId}_password`, password);
            hideLoading();
            showPage('dashboard-page');
            loadActiveTasks();
        } catch (error) {
            hideLoading();
            alert(error.error || 'Failed to create game');
        }
    });

    // Camera and Task Submission
    document.getElementById('team1-camera-btn').addEventListener('click', () => {
        if (document.getElementById('task-info1').style.display === 'block') {
            initializeCamera();
        }
    });

    document.getElementById('team2-camera-btn').addEventListener('click', () => {
        if (document.getElementById('task-info2').style.display === 'block') {
            initializeCamera();
        }
    });

    // Navigation Functions
    function goBack() {
        if (locationCheckInterval) {
            clearInterval(locationCheckInterval);
        }
        if (watchId) {
            navigator.geolocation.clearWatch(watchId);
        }
        if (cameraStream) {
            stopCamera();
        }

        const activePage = document.querySelector('.page.active');
        if (activePage) {
            activePage.classList.remove('active');
            if (currentRole === 'owner') {
                handleOwnerBack(activePage.id);
            } else {
                handlePlayerBack(activePage.id);
            }
        }
    }

    function handleOwnerBack(currentPageId) {
        switch (currentPageId) {
            case 'first-page':
                splashScreen.style.display = 'flex';
                break;
            case 'dashboard-page':
                showPage('first-page');
                break;
            case 'winners-page':
                showPage('dashboard-page');
                break;
            default:
                showPage('first-page');
        }
    }

    function handlePlayerBack(currentPageId) {
        switch (currentPageId) {
            case 'troop-selection-page':
                splashScreen.style.display = 'flex';
                break;
            case 'troop1-setup-page':
            case 'troop2-setup-page':
            case 'troop1-login-page':
            case 'troop2-login-page':
                showPage('troop-selection-page');
                break;
            case 'team1-page':
            case 'team2-page':
                showPage('troop-selection-page');
                break;
            default:
                splashScreen.style.display = 'flex';
        }
    }

    // Helper Functions
    function formatTimeLeft(timerEndsAt) {
        const timeLeft = timerEndsAt - Date.now();
        if (timeLeft <= 0) return 'Expired';
        const minutes = Math.floor(timeLeft / 60000);
        const seconds = Math.floor((timeLeft % 60000) / 1000);
        return `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }

    // Initialize back buttons
    document.querySelectorAll('.back-button').forEach(button => {
        button.addEventListener('click', goBack);
    });

    // Initialize winners button
    document.getElementById('winners-btn')?.addEventListener('click', () => {
        showPage('winners-page');
    });

    // Initialize the app
    splashScreen.style.display = 'flex';
});

style.css

/* General Reset */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    margin: 0;
    font-family: Arial, sans-serif;
    background-color: #1e1e1e;
    color: #ffffff;
    min-height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    overflow-x: hidden;
}

#app {
    width: 100%;
    max-width: 500px;
    margin: auto;
    padding: 20px;
    background: #262626;
    border-radius: 12px;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
    position: relative;
}

/* Loading Overlay */
.loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    z-index: 2000;
}

.loading-spinner {
    width: 50px;
    height: 50px;
    border: 5px solid #f3f3f3;
    border-top: 5px solid #008080;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Page Management */
.page {
    display: none;
    padding: 20px;
}

.page.active {
    display: block;
}

/* Typography */
h1 {
    font-size: 2rem;
    color: #ffffff;
    margin-bottom: 20px;
}

h2 {
    font-size: 1.5rem;
    color: #00cccc;
    margin-bottom: 15px;
    text-align: center;
}

h3 {
    font-size: 1.2rem;
    color: #ffffff;
    margin-bottom: 10px;
}

.graffiti-font {
    font-family: 'Sprite Graffiti', cursive;
}

.centered-text {
    text-align: center;
}

/* Forms and Inputs */
input, textarea {
    width: 100%;
    padding: 12px;
    margin: 10px 0;
    background-color: #444444;
    border: 2px solid #008080;
    border-radius: 8px;
    color: #ffffff;
    font-size: 1rem;
    transition: border-color 0.3s ease;
}

input:focus, textarea:focus {
    border-color: #00cccc;
    outline: none;
}

/* Buttons */
button {
    padding: 12px 20px;
    background-color: #008080;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1rem;
    transition: background-color 0.3s ease;
    margin: 5px;
}

button:hover {
    background-color: #00cccc;
}

button:disabled {
    background-color: #666666;
    cursor: not-allowed;
}

.back-button {
    background-color: #ff4d4d;
    margin-top: 10px;
}

.delete-button {
    background-color: #ff4d4d;
    position: fixed;
    bottom: 20px;
    right: 20px;
}

/* Camera Interface */
.camera-interface {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: #000;
    z-index: 1500;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

#camera-feed, #photo-canvas {
    width: 100%;
    max-width: 100vw;
    height: auto;
    max-height: 80vh;
    object-fit: contain;
}

.camera-controls {
    position: absolute;
    bottom: 20px;
    width: 100%;
    display: flex;
    justify-content: center;
    gap: 20px;
    padding: 10px;
}

.camera-button {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.3);
    border: 2px solid white;
    color: white;
    font-size: 24px;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 0;
}

/* Task Review Section */
.task-review {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: #262626;
    z-index: 1000;
    padding: 20px;
    overflow-y: auto;
}

.submissions-container {
    display: flex;
    gap: 20px;
    margin-top: 20px;
}

.team-submissions {
    flex: 1;
    background: #333;
    padding: 15px;
    border-radius: 8px;
}

.submission-content {
    margin-top: 10px;
    min-height: 200px;
}

.submission-item {
    background: #444;
    padding: 10px;
    margin-bottom: 10px;
    border-radius: 5px;
}

.submission-photo {
    width: 100%;
    max-height: 200px;
    object-fit: contain;
    margin-top: 10px;
    border-radius: 5px;
}

.timestamp {
    font-size: 0.8rem;
    color: #aaa;
    text-align: right;
    margin-top: 5px;
}

.winner-button {
    width: 100%;
    margin-top: 10px;
}

/* Distance Indicator */
.distance-indicator {
    position: absolute;
    top: 60px;
    right: 20px;
    background: rgba(0, 0, 0, 0.5);
    padding: 5px 10px;
    border-radius: 15px;
    font-size: 0.9rem;
}

/* Task Info */
.task-info {
    background: rgba(0, 0, 0, 0.7);
    padding: 15px;
    border-radius: 8px;
    margin-top: 20px;
    text-align: center;
}

.task-info h3 {
    color: #00cccc;
    margin-bottom: 10px;
}

.submit-button {
    margin-top: 15px;
    width: 100%;
}

/* Lists */
ul {
    list-style-type: none;
    padding: 0;
}

li {
    background-color: #444444;
    margin: 10px 0;
    padding: 12px;
    border-radius: 8px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

li:hover {
    background-color: #555555;
}

/* Splash Screen */
.splash-screen {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100vh;
    background-color: #1e1e1e;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    z-index: 1000;
}

/* Logo and Branding */
.centered-logo {
    width: 150px;
    height: auto;
    margin: 0 auto 20px;
    display: block;
}

/* Compass Module */
.compass-module {
    position: relative;
    width: 250px;
    height: 250px;
    margin: 50px auto 0;
}

.compass-base {
    width: 100%;
    height: 100%;
    background-color: #333;
    border: 5px solid #008080;
    border-radius: 50%;
    position: relative;
}

.compass-markers {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 100%;
    height: 100%;
}

.compass-markers div {
    position: absolute;
    font-size: 14px;
    color: #ffffff;
    font-weight: bold;
}

.compass-markers .north { top: 10%; left: 50%; transform: translateX(-50%); }
.compass-markers .south { bottom: 10%; left: 50%; transform: translateX(-50%); }
.compass-markers .east { right: 10%; top: 50%; transform: translateY(-50%); }
.compass-markers .west { left: 10%; top: 50%; transform: translateY(-50%); }

.compass-needle {
    position: absolute;
    top: 50%;
    left: 50%;
    transform-origin: center;
    width: 6px;
    height: 100px;
    background-color: #ff4d4d;
    border-radius: 3px;
    transform: translate(-50%, -100%) rotate(0deg);
    transition: transform 0.1s ease-out;
}

.compass-needle::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 0;
    height: 0;
    border-left: 10px solid transparent;
    border-right: 10px solid transparent;
    border-bottom: 20px solid #ff4d4d;
}

/* Modals */
.modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal-content {
    background-color: #262626;
    padding: 20px;
    border-radius: 8px;
    width: 90%;
    max-width: 400px;
}

.modal-buttons {
    display: flex;
    justify-content: space-between;
    margin-top: 20px;
    gap: 10px;
}

/* Error Messages */
.error-message {
    color: #ff4d4d;
    font-size: 0.9rem;
    margin-top: 10px;
}

/* Owner Dashboard Specific */
#top-bar {
    background-color: #008080;
    padding: 15px;
    border-radius: 8px 8px 0 0;
    margin-bottom: 20px;
    position: relative;
}

#active-game-section {
    margin: 20px 0;
}

/* Responsive Design */
@media (max-width: 600px) {
    #app {
        padding: 10px;
        margin: 10px;
    }

    .compass-module {
        width: 200px;
        height: 200px;
    }

    .submissions-container {
        flex-direction: column;
    }

    .camera-controls {
        bottom: 10px;
        gap: 10px;
    }

    .camera-button {
        width: 50px;
        height: 50px;
        font-size: 20px;
    }
}

server.js 

const express = require('express');
const fs = require('fs');
const path = require('path');
const multer = require('multer');
const app = express();
const port = 3000;

// Configure multer for file uploads
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const uploadDir = 'uploads';
        if (!fs.existsSync(uploadDir)) {
            fs.mkdirSync(uploadDir);
        }
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        cb(null, `${Date.now()}-${file.originalname}`);
    }
});

const upload = multer({ storage: storage });

// Middleware
app.use(express.json());
app.use(express.static(path.join(__dirname)));
app.use('/uploads', express.static('uploads'));

// Initialize data storage
let data = {};
if (fs.existsSync('data.json')) {
    data = JSON.parse(fs.readFileSync('data.json', 'utf8'));
}

// Helper function to save data
function saveData() {
    fs.writeFileSync('data.json', JSON.stringify(data, null, 2));
}

// Helper function to calculate distance between coordinates
function calculateDistance(lat1, lon1, lat2, lon2) {
    const R = 6371e3; // Earth's radius in meters
    const φ1 = lat1 * Math.PI / 180;
    const φ2 = lat2 * Math.PI / 180;
    const Δφ = (lat2 - lat1) * Math.PI / 180;
    const Δλ = (lon2 - lon1) * Math.PI / 180;

    const a = Math.sin(Δφ/2) * Math.sin(Δφ/2) +
             Math.cos(φ1) * Math.cos(φ2) *
             Math.sin(Δλ/2) * Math.sin(Δλ/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));

    return R * c; // Distance in meters
}

// OWNER API ENDPOINTS
app.get('/games', (req, res) => {
    const games = Object.keys(data).map(gameId => ({
        gameId,
        gameName: data[gameId].gameName,
        troops: {
            troop1: data[gameId].troops?.troop1?.name || 'Troop 1',
            troop2: data[gameId].troops?.troop2?.name || 'Troop 2'
        }
    }));
    res.json(games);
});

app.post('/create-game', (req, res) => {
    const { gameName, password } = req.body;
    if (!gameName || !password) {
        return res.status(400).json({ error: 'Game Name and Password are required' });
    }

    const gameId = `game-${Date.now()}`;
    data[gameId] = {
        gameName,
        password,
        status: 'active',
        troops: {
            troop1: { name: null, password: null },
            troop2: { name: null, password: null }
        },
        tasks: [],
        winners: []
    };
    saveData();
    res.json({ gameId });
});

app.post('/verify-password', (req, res) => {
    const { gameId, password } = req.body;
    if (!data[gameId]) {
        return res.status(404).json({ error: 'Game not found' });
    }
    if (data[gameId].password !== password) {
        return res.status(401).json({ error: 'Invalid password' });
    }
    res.json({
        success: true,
        gameData: {
            gameName: data[gameId].gameName,
            troops: data[gameId].troops,
            tasks: data[gameId].tasks
        }
    });
});

app.post('/add-task', (req, res) => {
    const { gameId, troop1Task, troop2Task } = req.body;
    if (!data[gameId]) {
        return res.status(404).json({ error: 'Game not found' });
    }

    const taskGroup = {
        id: `task-${Date.now()}`,
        troop1Task: {
            ...troop1Task,
            taskId: `task1-${Date.now()}`,
            submissions: [],
            revealed: false,
            status: 'ongoing',
            timerEndsAt: Date.now() + (troop1Task.timer * 60 * 1000)
        },
        troop2Task: {
            ...troop2Task,
            taskId: `task2-${Date.now()}`,
            submissions: [],
            revealed: false,
            status: 'ongoing',
            timerEndsAt: Date.now() + (troop2Task.timer * 60 * 1000)
        },
        status: 'ongoing',
        winner: null,
        createdAt: Date.now()
    };

    data[gameId].tasks.push(taskGroup);
    saveData();
    res.json({ success: true, taskId: taskGroup.id });
});

// Check location and reveal task if close enough
app.post('/check-location', (req, res) => {
    const { gameId, troopId, latitude, longitude } = req.body;
    
    if (!data[gameId]) {
        return res.status(404).json({ error: 'Game not found' });
    }

    const activeTask = data[gameId].tasks.find(t => t.status === 'ongoing');
    if (!activeTask) {
        return res.status(404).json({ error: 'No active task found' });
    }

    const task = troopId === 'troop1' ? activeTask.troop1Task : activeTask.troop2Task;
    const distance = calculateDistance(
        latitude,
        longitude,
        task.latitude,
        task.longitude
    );

    // 20 feet ≈ 6.096 meters
    if (distance <= 6.096) {
        task.revealed = true;
        saveData();
        res.json({
            success: true,
            taskRevealed: true,
            taskDetails: {
                description: task.taskDescription,
                submissionDetails: task.submissionDetails,
                requiresPicture: task.requiresPicture
            }
        });
    } else {
        res.json({
            success: true,
            taskRevealed: false,
            distance: Math.round(distance)
        });
    }
});

// Get task direction
app.get('/task-direction/:gameId/:troopId', (req, res) => {
    const { gameId, troopId } = req.params;
    const { latitude, longitude } = req.query;

    if (!data[gameId]) {
        return res.status(404).json({ error: 'Game not found' });
    }

    const activeTask = data[gameId].tasks.find(t => t.status === 'ongoing');
    if (!activeTask) {
        return res.status(404).json({ error: 'No active task found' });
    }

    const task = troopId === 'troop1' ? activeTask.troop1Task : activeTask.troop2Task;
    
    // Calculate bearing
    const lat1 = latitude * Math.PI / 180;
    const lat2 = task.latitude * Math.PI / 180;
    const lon1 = longitude * Math.PI / 180;
    const lon2 = task.longitude * Math.PI / 180;
    
    const y = Math.sin(lon2 - lon1) * Math.cos(lat2);
    const x = Math.cos(lat1) * Math.sin(lat2) -
             Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);
    const bearing = Math.atan2(y, x) * 180 / Math.PI;

    res.json({
        success: true,
        bearing: (bearing + 360) % 360
    });
});

// Submit task response with photo
app.post('/submit-task', upload.single('photo'), (req, res) => {
    const { gameId, taskId, troopId, response } = req.body;
    const photo = req.file;

    if (!data[gameId]) {
        return res.status(404).json({ error: 'Game not found' });
    }

    const taskGroup = data[gameId].tasks.find(t => t.id === taskId);
    if (!taskGroup) {
        return res.status(404).json({ error: 'Task not found' });
    }

    const task = troopId === 'troop1' ? taskGroup.troop1Task : taskGroup.troop2Task;
    const submission = {
        response,
        photoPath: photo ? photo.path : null,
        submittedAt: Date.now()
    };

    task.submissions.push(submission);
    saveData();

    res.json({ success: true });
});

// Set task winner
app.post('/set-winner', (req, res) => {
    const { gameId, taskId, winningTroopId, reward } = req.body;
    
    if (!data[gameId]) {
        return res.status(404).json({ error: 'Game not found' });
    }

    const taskGroup = data[gameId].tasks.find(t => t.id === taskId);
    if (!taskGroup) {
        return res.status(404).json({ error: 'Task not found' });
    }

    taskGroup.winner = winningTroopId;
    taskGroup.reward = reward;
    taskGroup.status = 'completed';
    
    // Add to winners list
    data[gameId].winners.push({
        taskId,
        winningTroopId,
        reward,
        completedAt: Date.now()
    });

    saveData();
    res.json({ success: true });
});

// PLAYER API ENDPOINTS
app.post('/register-troop', (req, res) => {
    const { gameId, troopId, name, password } = req.body;
    
    if (!data[gameId]) {
        return res.status(404).json({ error: 'Game not found' });
    }

    data[gameId].troops[troopId] = {
        name,
        password
    };
    saveData();
    res.json({ success: true });
});

app.post('/verify-troop', (req, res) => {
    const { gameId, troopId, password } = req.body;
    
    if (!data[gameId] || !data[gameId].troops[troopId]) {
        return res.status(404).json({ error: 'Troop not found' });
    }

    if (data[gameId].troops[troopId].password !== password) {
        return res.status(401).json({ error: 'Invalid password' });
    }

    res.json({ success: true });
});

// Get active task for troop
app.get('/active-task/:gameId/:troopId', (req, res) => {
    const { gameId, troopId } = req.params;
    
    if (!data[gameId]) {
        return res.status(404).json({ error: 'Game not found' });
    }

    const activeTask = data[gameId].tasks.find(t => t.status === 'ongoing');
    if (!activeTask) {
        return res.json({ success: true, hasActiveTask: false });
    }

    const task = troopId === 'troop1' ? activeTask.troop1Task : activeTask.troop2Task;
    
    res.json({
        success: true,
        hasActiveTask: true,
        taskId: activeTask.id,
        revealed: task.revealed,
        taskDetails: task.revealed ? {
            description: task.taskDescription,
            submissionDetails: task.submissionDetails,
            requiresPicture: task.requiresPicture,
            timeLeft: task.timerEndsAt - Date.now()
        } : null
    });
});

// Task expiration check
function checkExpiredTasks() {
    const now = Date.now();
    let tasksUpdated = false;
    
    Object.keys(data).forEach(gameId => {
        data[gameId].tasks.forEach(taskGroup => {
            if (taskGroup.status === 'ongoing') {
                if (taskGroup.troop1Task.timerEndsAt < now &&
                    taskGroup.troop2Task.timerEndsAt < now) {
                    taskGroup.status = 'expired';
                    tasksUpdated = true;
                }
            }
        });
    });

    if (tasksUpdated) {
        saveData();
    }
}

// Check for expired tasks every minute
setInterval(checkExpiredTasks, 60 * 1000);

// Serve index.html for all other routes
app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// Start server
app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}`);
});